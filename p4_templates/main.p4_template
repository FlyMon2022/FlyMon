#include <core.p4>
#if __TARGET_TOFINO__ == 2
#include <t2na.p4>
#else
#include <tna.p4>
#endif

#include "headers.p4"
#include "util.p4"
#include "task_registers.p4"
#include "compression_units.p4"
#include "execution_units.p4"
#include "reporting_units.p4"
#include "dupkey_filter.p4"


control SwitchIngress(
        inout header_t hdr,
        inout ingress_metadata_t ig_md,
        in ingress_intrinsic_metadata_t ig_intr_md,
        in ingress_intrinsic_metadata_from_parser_t ig_intr_prsr_md,
        inout ingress_intrinsic_metadata_for_deparser_t ig_intr_dprsr_md,
        inout ingress_intrinsic_metadata_for_tm_t ig_intr_tm_md) {

    // Create direct counters

    action hit(PortId_t port) {
        ig_intr_tm_md.ucast_egress_port = port;
    }

    action miss() {
        ig_intr_dprsr_md.drop_ctl = 0x1; // Drop packet.
    }

    table simple_fwd {
        key = {
            ig_intr_md.ingress_port : exact;
        }
        actions = {
            hit;
            miss;
        }
        const default_action = miss;
        size = 64;
    }
        {%for tmu in tmu_configs %}
    TaskRegister_{{tmu.id}}() task_register_{{tmu.id}};
    {% endfor %}

    {%for cu in cu_configs %}
        CompressionUnit_{{cu.id}}() cu_{{cu.id}};
    {% endfor %}

    {%for eu in eu_configs %}
        ExecutionUnit_{{eu.id}}() eu_{{eu.id}};
    {% endfor %}

    {%for ru in ru_configs %}
        ReportingUnit_{{ru.id}}() ru_{{ru.id}};
    {% endfor %}
        
        DupKeyFilter() dup_filter;
    apply {
        simple_fwd.apply();
        {%for tmu in tmu_configs %}
        task_register_{{tmu.id}}.apply(hdr, ig_intr_md, ig_md);
            cu_{{tmu.cu_id}}.apply(hdr, ig_intr_md, ig_md);
            {%for eu_id in tmu.eu_list %}
            eu_{{eu_id}}.apply(hdr, ig_intr_md, ig_md);
            {% endfor %}
            ru_{{tmu.ru_id}}.apply(hdr, ig_intr_md, ig_md);
        {% endfor %}

        // digest is generated in the deparser.
        dup_filter.apply(hdr, ig_intr_md, ig_md, ig_intr_dprsr_md);
    
        ig_intr_tm_md.bypass_egress = 1w1;
    }
}


// ---------------------------------------------------------------------------
// Ingress Deparser
// ---------------------------------------------------------------------------
control SwitchIngressDeparser(
        packet_out pkt,
        inout header_t hdr,
        in ingress_metadata_t ig_md,
        in ingress_intrinsic_metadata_for_deparser_t ig_intr_dprsr_md) {
    Digest<heavy_key_digest_t>() digest;
    apply {
        if (ig_intr_dprsr_md.digest_type == 1) {
            digest.pack({hdr.ipv4.src_addr, hdr.ipv4.dst_addr, ig_md.elements.src_port, ig_md.elements.dst_port, hdr.ipv4.protocol });
        }
        pkt.emit(hdr);
    }
}


// ---------------------------------------------------------------------------
// Ingress parser
// ---------------------------------------------------------------------------
parser SwitchIngressParser(
        packet_in pkt,
        out header_t hdr,
        out ingress_metadata_t ig_md,
        out ingress_intrinsic_metadata_t ig_intr_md) {

    TofinoIngressParser() tofino_parser;

    state start {
        tofino_parser.apply(pkt, ig_intr_md);

        ig_md.elements.src_port = 0;
        ig_md.elements.dst_port = 0;

        {%for cu in cu_configs %}
            {%for bits_len in cu.target_bits %}
                ig_md.cu_{{cu.id}}.hash_val{{loop.index-1}} = 0;
            {% endfor %}
        {% endfor %}

        {%for eu in eu_configs %}
        ig_md.eu_{{eu.id}}.task_id = 0;
        ig_md.eu_{{eu.id}}.key = 0;
        ig_md.eu_{{eu.id}}.val = 0;
        {% endfor %}

        {%for ru in ru_configs %}
        ig_md.ru_{{ru.id}}.flag = 0;
        {% endfor %}

        ig_md.dup_filter_meta.bit0 = 0;
        ig_md.dup_filter_meta.bit1 = 0;
        ig_md.dup_filter_meta.bit2 = 0;
        ig_md.dup_filter_meta.bit3 = 0;

        transition parse_ethernet;
    }

    state parse_ethernet {
        pkt.extract(hdr.ethernet);
        transition select (hdr.ethernet.ether_type) {
            ETHERTYPE_IPV4 : parse_ipv4;
            default : reject;
        }
    }
    state parse_ipv4 {
        pkt.extract(hdr.ipv4);
        transition select (hdr.ipv4.protocol) {
            IP_PROTOCOLS_TCP : parse_tcp;
            IP_PROTOCOLS_UDP : parse_udp;
            default : reject;
        }
    }
    state parse_tcp {
        pkt.extract(hdr.tcp);
        ig_md.elements.src_port = hdr.tcp.src_port;
        ig_md.elements.dst_port = hdr.tcp.dst_port;
        transition accept;
    }
    state parse_udp {
        pkt.extract(hdr.udp);
        ig_md.elements.src_port = hdr.udp.src_port;
        ig_md.elements.dst_port = hdr.udp.dst_port;
        transition accept;
    }
}


Pipeline(SwitchIngressParser(),
         SwitchIngress(),
         SwitchIngressDeparser(),
         EmptyEgressParser(),
         EmptyEgress(),
         EmptyEgressDeparser()) pipe;

Switch(pipe) main;