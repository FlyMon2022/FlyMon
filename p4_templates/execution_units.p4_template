#ifndef _EXECUTION_UNITS_P4_
#define _EXECUTION_UNITS_P4_

#include "mdata.p4"

{%for eu in eu_configs %}
control ExecutionUnit_{{eu.id}} (in header_t hdr,
                                 in ingress_intrinsic_metadata_t ig_intr_md,
                                 inout ingress_metadata_t ig_md) 
{ 
    action no_action(){}
    // ------------------------------
    // Initialization Stage
    // ------------------------------
    
    {% for hash_bits in cu_target_bits %}
    action set_key_hash{{loop.index-1}}() {
        ig_md.eu_{{eu.id}}.key[{{eu.bit_end[loop.index-1] - eu.bit_start[loop.index-1]}}:0] = ig_md.cu_{{eu.cu_id}}.hash_val{{loop.index-1}}[{{eu.bit_end[loop.index-1]}}:{{eu.bit_start[loop.index-1]}}];
    }
    {% endfor %}

    {%if eu.stage_loc >= 0%}
    @pragma stage {{eu.stage_loc}}
    {%endif%}
    table tbl_set_key {
        key = {
            ig_md.eu_{{eu.id}}.task_id : exact;
        }
        actions = {
            {% for hash_bits in cu_target_bits %}
            set_key_hash{{loop.index-1}};
            {% endfor %}
        }
        size = 32;
    }

    action set_val_const(bit<16> const_val) {
        ig_md.eu_{{eu.id}}.val = const_val; 
    }
    {% for hash_bits in cu_target_bits %}
    action set_val_hash{{loop.index-1}}() {
        ig_md.eu_{{eu.id}}.val =  ig_md.cu_{{eu.cu_id}}.hash_val{{loop.index-1}}[15:0];
    }
    {% endfor %}

    {%if eu.stage_loc >= 0%}
    @pragma stage {{eu.stage_loc}}
    {%endif%}
    table tbl_set_val {
        key = {
            ig_md.eu_{{eu.id}}.task_id : exact;
        }
        actions = {
            set_val_const;
            {% for hash_bits in cu_target_bits %}
            set_val_hash{{loop.index-1}};
            {% endfor %}
        }
        size = 32;
    }

    action key_add_offset(bit<32> offset){
       ig_md.eu_{{eu.id}}.key = ig_md.eu_{{eu.id}}.key + offset;
    }
    // address isolution
    {%if eu.stage_loc >= 0%}
    @pragma stage {{eu.stage_loc + 1}}
    {%endif%}
    table tbl_process_key {
        key = {
            ig_md.eu_{{eu.id}}.task_id : exact;
            ig_md.eu_{{eu.id}}.key     : ternary;
        }
        actions = {
            key_add_offset;
            no_action;
        }
        const default_action = no_action();
        size = 64;
    }
    
    action val_one_hot(bit<16> code){
        ig_md.eu_{{eu.id}}.val = code;
    }
    action val_sub_result(){
        // TODO: need to connect to another EU.
        // This will be implemented in the future.
        // ig_md.eu_{{eu.id}}.val = ig_md.eu_{{eu.id}}.val - ig_md.eu_{{eu.id}}.result;
    }
    {%if eu.stage_loc >= 0%}
    @pragma stage {{eu.stage_loc + 1}}
    {%endif%}
    table tbl_process_val {
        key = {
            ig_md.eu_{{eu.id}}.task_id : exact;
            ig_md.eu_{{eu.id}}.val     : ternary;
        }
        actions = {
            no_action;
            val_one_hot;
            val_sub_result;
        }
        const default_action = no_action();
        size = 64;
    }

    // ------------------------------
    // Operation Stage
    // ------------------------------
    Register<bit<16>, bit<32>>({{eu.size}}, 0) pages; 

    RegisterAction<bit<16>, bit<32>, bit<16>>(pages) reg_op_add = {
        void apply(inout bit<16> value, out bit<16> result) {
            result = 0;
            value = value |+| ig_md.eu_{{eu.id}}.val;
            result = value;
        }
    };
    RegisterAction<bit<16>, bit<32>, bit<16>>(pages) reg_op_max = {
        void apply(inout bit<16> value, out bit<16> result) {
            result = 0;
            if(value < ig_md.eu_{{eu.id}}.val){
                value = ig_md.eu_{{eu.id}}.val;
                result = value;
            }
        }
    };
    RegisterAction<bit<16>, bit<32>, bit<16>>(pages) reg_op_and = {
        void apply(inout bit<16> value, out bit<16> result) {
            value = ig_md.eu_{{eu.id}}.val & value;
            result = value;
        }
    };
    RegisterAction<bit<16>, bit<32>, bit<16>>(pages) reg_op_or = {
        void apply(inout bit<16> value, out bit<16> result) {
            value = ig_md.eu_{{eu.id}}.val | value;
            result = value;
        }
    };

    action op_add(){
        ig_md.eu_{{eu.id}}.val = reg_op_add.execute(ig_md.eu_{{eu.id}}.key);
    }
    action op_max(){
        ig_md.eu_{{eu.id}}.val = reg_op_max.execute(ig_md.eu_{{eu.id}}.key);
    }
    action op_and(){
        ig_md.eu_{{eu.id}}.val = reg_op_and.execute(ig_md.eu_{{eu.id}}.key);
    }
    action op_or(){
        ig_md.eu_{{eu.id}}.val = reg_op_or.execute(ig_md.eu_{{eu.id}}.key);
    }
    {%if eu.stage_loc >= 0%}
    @pragma stage {{eu.stage_loc + 2}}
    {%endif%}
    table tbl_select_op {
        key = {
            ig_md.eu_{{eu.id}}.task_id : exact;
        }
        actions = {
            op_or;
            op_add;
            op_max;
            op_and;
        }
        size = 32;
    }
    apply {
        tbl_set_key.apply();
        tbl_set_val.apply();

        tbl_process_key.apply();
        tbl_process_val.apply();

        tbl_select_op.apply();
    }
}
{% endfor%}
#endif