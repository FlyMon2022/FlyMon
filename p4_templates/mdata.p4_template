// This file defines some shared variables for all passive 
// measurement data structure.
#ifndef _MDATA_P4_
#define _MDATA_P4_


// elements_t is extract by looking up before extract;
// this can avoid phv-grouping with std packet header fields.
struct elements_t {
    bit<16> src_port;
    bit<16> dst_port;
}

{%for cu in cu_configs %}
{% if cu.alias_id >= 0 %}
    {%for bits_len in cu.target_bits %}
    @pa_alias("ingress", "ig_md.cu_{{cu.id}}.hash_val{{loop.index-1}}", "ig_md.cu_{{cu.alias_id}}.hash_val{{loop.index-1}}")
    {% endfor %}
{% endif %}
struct cu{{cu.id}}_metadata_t {
    {%for bits_len in cu.target_bits %}
    bit<{{bits_len}}>    hash_val{{loop.index-1}};
    {% endfor %}
}
{% endfor %}

{%for eu in eu_configs %}
{% if eu.alias_id >= 0 %}
@pa_alias("ingress", "ig_md.eu_{{eu.id}}.key", "ig_md.eu_{{eu.alias_id}}.key")
@pa_alias("ingress", "ig_md.eu_{{eu.id}}.val", "ig_md.eu_{{eu.alias_id}}.val")
{% endif %}
struct eu{{eu.id}}_metadata_t {
    bit<8>     task_id;
    bit<32>    key;
    bit<16>    val;
	// bit<16>    result; // Output, use the `val` to act the function of the `result`, 
                          // since the `result` is always used after the `value` is invalid.
}
{% endfor %}


{%for ru in ru_configs %}
struct ru{{ru.id}}_metadata_t {
    bit<1> flag;
}
{% endfor %}

struct dupkey_filter_metadata_t {
    bit<1> bit0;
    bit<1> bit1;
    bit<1> bit2;
    bit<1> bit3;
}

struct heavy_key_digest_t {
    bit<32> a;
    bit<32> b;
    bit<16> c;
    bit<16> d;
    bit<8>  e;
}


struct ingress_metadata_t {
    // elements_t is extract by looking up before extract;
    // this can avoid phv-grouping with std packet header fields.
    elements_t   elements;

    {%for cu in cu_configs %}
        cu{{cu.id}}_metadata_t cu_{{cu.id}};
    {% endfor %}

    {%for eu in eu_configs %}
        eu{{eu.id}}_metadata_t eu_{{eu.id}};
    {% endfor %}

    {%for ru in ru_configs %}
        ru{{ru.id}}_metadata_t ru_{{ru.id}};
    {% endfor %}

    dupkey_filter_metadata_t dup_filter_meta;
}

struct egress_metadata_t {

}

#endif
