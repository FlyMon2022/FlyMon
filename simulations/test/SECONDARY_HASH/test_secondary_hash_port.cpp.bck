#include "DataTrace.h"
#include "CMSketch.h"
#include "HowLog/HowLog.h"
#include <unordered_map>
#include <string>
using namespace std;

#define TOT_MEM_IN_BYTES 1048576

int main(){
    LOG_LEVEL = L_INFO;
    DataTrace trace;
    // trace.LoadFromFile("../data/WIDE/one_sec_15.dat");
    // trace.LoadFromFile("../data/WIDE/five_sec_0.dat");
    trace.LoadFromFile("../data/WIDE/ten_sec_1.dat");
    // trace.LoadFromFile("../data/WIDE/thirty_sec_0.dat");
    // trace.LoadFromFile("../data/WIDE/sixty_sec_0.dat");
 
    CM_Sketch cm_sketch1(3, 6, TOT_MEM_IN_BYTES);
    CM_Sketch cm_sketch2(3, 4, TOT_MEM_IN_BYTES);

    random_device rd;
    BOBHash32* hash_src_ip;
    BOBHash32* hash_dst_ip;
    hash_src_ip = new BOBHash32(uint32_t(rd() % MAX_PRIME32));
    hash_dst_ip = new BOBHash32(uint32_t(rd() % MAX_PRIME32));

	unordered_map<string, int> Real_Freq;
    // int mid_size = trace.size() / 2;
    int mid_size = trace.size();
    int count = 0;
    for (auto it = trace.begin(); it!= trace.end(); ++it){
        count++;
        string key((const char*)((*it)->getSrcIpPort()), 6);
        cm_sketch1.insert((uint8_t*)key.c_str());
        // uint32_t hash_src = hash_src_ip->run(key.c_str(), 4) & 0xfffffc00;
        // uint32_t hash_port = hash_src_ip->run(key.c_str()+4, 2) & 0x000003ff;
        // uint32_t hash = hash_src + hash_port;
        //uint32_t hash_dst = hash_src_ip->run((char*)(*it)->getDstBytes(), 4) & 0x0000ffff;
        //uint32_t consolidated_hash = hash_src + hash_dst;
        cm_sketch2.insert_src_port((uint8_t*)key.c_str());
		Real_Freq[key]++;
    }
    double temp_relation_error_sum1 = 0;
    double temp_relation_error_sum2 = 0;
    int key_num = Real_Freq.size();
    for (auto item : Real_Freq){
        string key = item.first;
        // uint32_t hash_src = hash_src_ip->run(key.c_str(), 4) & 0xfffffc00;
        // uint32_t hash_port = hash_src_ip->run(key.c_str()+4, 2) & 0x000003ff;
        // uint32_t hash = hash_src + hash_port;
 		int estimate1 = cm_sketch1.query((uint8_t*)key.c_str());
        int estimate2 = cm_sketch2.query_src_port((uint8_t*)key.c_str());
		double relative_error1 = abs(item.second - estimate1) / (double)item.second;
        double relative_error2 = abs(item.second - estimate2) / (double)item.second;
		temp_relation_error_sum1 += relative_error1;    
        temp_relation_error_sum2 += relative_error2;       
    }
    HOW_LOG(L_INFO, "Total %d packets, %d flows, ARE1 = %.2f, ARE2 = %.2f", trace.size(), 
                     Real_Freq.size(), 
                     temp_relation_error_sum1/Real_Freq.size(), temp_relation_error_sum2/Real_Freq.size());
}