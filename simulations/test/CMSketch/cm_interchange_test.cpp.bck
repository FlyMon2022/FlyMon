#include "DataTrace.h"
#include "CMSketch.h"
#include "HowLog/HowLog.h"
#include <unordered_map>
#include <string>
using namespace std;

#define TOT_MEM_IN_BYTES 40 * 1024
#define SKETCH_NUM 10

// 0.489137 400 * 1024 - 1
// 0.014196 400 * 1024 - 10
// 10.026875 40 * 1024 - 10
// int main(){
//     // LOG_LEVEL = L_INFO;
//     // DataTrace trace;
//     // // trace.LoadFromFile("../data/WIDE/one_sec_15.dat");
//     // trace.LoadFromFile("../data/WIDE/five_sec_0.dat");
//     // // trace.LoadFromFile("../data/WIDE/ten_sec_1.dat");
//     // // trace.LoadFromFile("../data/WIDE/thirty_sec_0.dat");
//     // // trace.LoadFromFile("../data/WIDE/sixty_sec_0.dat");

//     // HOW_LOG(L_DEBUG, "One sketch to test 5 seconds, memory allocated : %d B, flow_key = %d", TOT_MEM_IN_BYTES, 8);  
//     // CM_Sketch cms1(4, 8, TOT_MEM_IN_BYTES);
//     // CM_Sketch cms2 = cms1;
//     // CM_Sketch cms3 = cms1;
//     // CM_Sketch cms4 = cms1;
//     // CM_Sketch cms5 = cms1;
//     // CM_Sketch cms6 = cms1;
//     // CM_Sketch cms7 = cms1;
//     // CM_Sketch cms8 = cms1;
//     // CM_Sketch cms9 = cms1;
//     // CM_Sketch cms10 = cms1;
//     // CM_Sketch sketches1[10] = {cms1, cms2, cms3, cms4, cms5, cms6, cms7, cms8, cms9, cms10};


//     // int unit = trace.size() / SKETCH_NUM;
//     // int sketch_idx = 0;
//     // int index = 0;
// 	// unordered_map<string, int> Real_Freq;
//     // for (auto it = trace.begin(); it!= trace.end(); ++it){
//     //     if ( (index + 1) % unit == 0 )
//     //     {
//     //         if(sketch_idx < SKETCH_NUM-1){
//     //             HOW_LOG(L_DEBUG, "sketch index %d +1", sketch_idx);
//     //             sketch_idx += 1;
//     //         }
//     //     }
            
//     //     sketches1[sketch_idx].insert((*it)->getFlowKey_IPPair());
//     //     string str((const char*)((*it)->getFlowKey_IPPair()), 8);
// 	// 	Real_Freq[str]++;
//     //     index += 1;
//     // }

//     // double temp_relation_error_sum = 0;
//     // int key_num = Real_Freq.size();
//     // for (auto item : Real_Freq){
//     //     string key = item.first;
//  	// 	int estimate = 0;
//     //     for(int i=0; i<SKETCH_NUM; ++i){
//     //         estimate += sketches1[i].query((uint8_t*)key.c_str());
//     //     } 
// 	// 	double relative_error = abs(item.second - estimate) / (double)item.second;
// 	// 	temp_relation_error_sum += relative_error;       
//     // }
//     // HOW_LOG(L_DEBUG, "Total %d packets, %d flows, ARE = %f", trace.size(), 
//     //                  Real_Freq.size(), 
//     //                  temp_relation_error_sum/Real_Freq.size());


//     // HOW_LOG(L_DEBUG, "Test cm_sketch use inter-change sketch, memory allocated : %d B, flow_key = %d", TOT_MEM_IN_BYTES, 8);  
//     // CM_Sketch cm_sketch_1(4, 8, TOT_MEM_IN_BYTES);
//     // CM_Sketch cm_sketch_2(4, 8, TOT_MEM_IN_BYTES);
//     // CM_Sketch cm_sketch_3(4, 8, TOT_MEM_IN_BYTES);
//     // CM_Sketch cm_sketch_4(4, 8, TOT_MEM_IN_BYTES);
//     // CM_Sketch sketches2[4] = {cm_sketch_1, cm_sketch_2, cm_sketch_3, cm_sketch_4};

// 	// Real_Freq.clear();

//     // unit = trace.size() / SKETCH_NUM;
//     // sketch_idx = 0;
//     // index = 0;
//     // for (auto it = trace.begin(); it!= trace.end(); ++it){
//     //     if ( (index + 1) % unit == 0 )
//     //     {
//     //         if(sketch_idx < SKETCH_NUM-1){
//     //             HOW_LOG(L_DEBUG, "sketch index %d +1", sketch_idx);
//     //             sketch_idx += 1;
//     //         }
//     //     }
            
//     //     sketches2[sketch_idx].insert((*it)->getFlowKey_IPPair());
//     //     string str((const char*)((*it)->getFlowKey_IPPair()), 8);
// 	// 	Real_Freq[str]++;
//     //     index += 1;
//     // }

//     // temp_relation_error_sum = 0;
//     // key_num = Real_Freq.size();
//     // for (auto item : Real_Freq){
//     //     string key = item.first;
//  	// 	int estimate = 0;
//     //     for(int i=0; i<SKETCH_NUM; ++i){
//     //         estimate += sketches2[i].query((uint8_t*)key.c_str());
//     //     } 
// 	// 	double relative_error = abs(item.second - estimate) / (double)item.second;
// 	// 	temp_relation_error_sum += relative_error;       
//     // }
//     // HOW_LOG(L_DEBUG, "Total %d packets, %d flows, ARE = %f", trace.size(), 
//     //                  Real_Freq.size(), 
//     //                  temp_relation_error_sum/Real_Freq.size());
// }